{"version":3,"sources":["RandomQuoteMachine.js","theme.js","index.js"],"names":["RandomQuoteMachine","useState","data","setData","updateQuote","a","fetch","response","json","statusCode","statusMessage","ok","Error","console","error","content","useEffect","Paper","component","Grid","className","id","container","spacing","direction","justifyContent","alignItems","item","xs","Typography","variant","class","Box","fontStyle","textAlign","m","author","href","encodeURIComponent","target","Button","size","onClick","fullWidth","style","textTransform","theme","createTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","Container","maxWidth","my","document","querySelector"],"mappings":"oUAiFeA,EA9EY,WACzB,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAD+B,SAGhBC,IAHgB,2EAG/B,oCAAAC,EAAA,+EAE2BC,MAAM,kCAFjC,cAEUC,EAFV,gBAGyDA,EAASC,OAHlE,mBAGYC,EAHZ,EAGYA,WAAYC,EAHxB,EAGwBA,cAAkBR,EAH1C,iBAISK,EAASI,GAJlB,uBAI4B,IAAIC,MAAJ,UAAaH,EAAb,YAA2BC,IAJvD,QAKIP,EAAQD,GALZ,kDAOIW,QAAQC,MAAR,MACAX,EAAQ,CAAEY,QAAS,iCARvB,2DAH+B,sBAkB/B,OAHAC,qBAAU,WACRZ,MACC,IACEF,EAGH,eAACe,EAAA,EAAD,CACEC,UAAWC,IACXC,UAAU,YACVC,GAAG,YACHC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,eAAe,eACfC,WAAW,WARb,UASE,cAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GAAf,SACE,eAACC,EAAA,EAAD,CAAYT,UAAU,OAAOC,GAAG,OAAOS,QAAQ,YAA/C,UACE,mBAAGC,MAAM,4BADX,IACyC7B,EAAKa,QAC5C,mBAAGgB,MAAM,kCAGb,cAACZ,EAAA,EAAD,CAAMQ,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CAAYT,UAAU,SAASC,GAAG,SAASS,QAAQ,QAAnD,SACE,eAACE,EAAA,EAAD,CAAKC,UAAU,SAASC,UAAU,QAAQC,EAAG,EAA7C,eACKjC,EAAKkC,cAId,eAACjB,EAAA,EAAD,CACEG,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SALb,UAME,cAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,EAAf,SACE,mBACES,KACE,yCACAC,mBAAmBpC,EAAKa,QAAU,OAASb,EAAKkC,QAElDf,GAAG,cACHkB,OAAO,SACPnB,UAAU,OAPZ,SAQE,mBAAGA,UAAU,uBAGjB,cAACD,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,EAAf,SACE,cAACY,EAAA,EAAD,CACEpB,UAAU,WACVC,GAAG,YACHS,QAAQ,WACRW,KAAK,QACLC,QAAStC,EACTuC,WAAS,EACTC,MAAO,CAAEC,cAAe,QAP1B,+BA5CU,M,wBCALC,EAjBDC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERpC,MAAO,CACLoC,KAAME,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCPfC,IAASC,OACP,eAACC,EAAA,EAAD,CAAeZ,MAAOA,EAAtB,UACE,cAACa,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC7B,EAAA,EAAD,CAAK8B,GAAI,EAAT,SACE,cAAC,EAAD,WAINC,SAASC,cAAc,Y","file":"static/js/main.723e7077.chunk.js","sourcesContent":["import { Box, Button, Grid, Paper, Typography } from \"@material-ui/core\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nconst RandomQuoteMachine = () => {\r\n  const [data, setData] = useState(null)\r\n\r\n  async function updateQuote() {\r\n    try {\r\n      const response = await fetch(\"https://api.quotable.io/random\")\r\n      const { statusCode, statusMessage, ...data } = await response.json()\r\n      if (!response.ok) throw new Error(`${statusCode} ${statusMessage}`)\r\n      setData(data)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setData({ content: \"Opps... Something went wrong\" })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateQuote()\r\n  }, [])\r\n  if (!data) return null\r\n\r\n  return (\r\n    <Paper\r\n      component={Grid}\r\n      className=\"quote-box\"\r\n      id=\"quote-box\"\r\n      container\r\n      spacing={4}\r\n      direction=\"column\"\r\n      justifyContent=\"space-around\"\r\n      alignItems=\"flex-end\">\r\n      <Grid item xs={12}>\r\n        <Typography className=\"text\" id=\"text\" variant=\"subtitle1\">\r\n          <i class=\"fas fa-quote-left fa-xs\" /> {data.content}\r\n          <i class=\"fas fa-quote-right fa-xs\" />\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs>\r\n        <Typography className=\"author\" id=\"author\" variant=\"body1\">\r\n          <Box fontStyle=\"italic\" textAlign=\"right\" m={1}>\r\n            - {data.author}\r\n          </Box>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        spacing={1}\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\">\r\n        <Grid item xs={3}>\r\n          <a\r\n            href={\r\n              \"https://twitter.com/intent/tweet?text=\" +\r\n              encodeURIComponent(data.content + \"\\n -\" + data.author)\r\n            }\r\n            id=\"tweet-quote\"\r\n            target=\"_blank\"\r\n            className=\"twit\">\r\n            <i className=\"fab fa-twitter\" />\r\n          </a>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button\r\n            className=\"newquote\"\r\n            id=\"new-quote\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onClick={updateQuote}\r\n            fullWidth\r\n            style={{ textTransform: \"none\" }}>\r\n            New Quote\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default RandomQuoteMachine\r\n","import { red } from \"@material-ui/core/colors\"\nimport { createTheme } from \"@material-ui/core/styles\"\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n})\n\nexport default theme\n","import { Box, Container } from \"@material-ui/core\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { ThemeProvider } from \"@material-ui/core/styles\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RandomQuoteMachine from \"./RandomQuoteMachine\"\nimport \"./style.css\"\nimport theme from \"./theme\"\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Container maxWidth=\"sm\">\n      <Box my={4}>\n        <RandomQuoteMachine />\n      </Box>\n    </Container>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n)\n"],"sourceRoot":""}